{"version":3,"sources":["measure.js"],"names":[],"mappingsfile":"measure.js","sourcesContent":["var measureTools = {};\r\nmeasureTools.sketch;\r\nmeasureTools.helpTooltipElement;\r\nmeasureTools.helpTooltip;\r\nmeasureTools.measureTooltipElement;\r\nmeasureTools.measureTooltip;\r\nmeasureTools.continuePolygonMsg = 'Click to continue drawing the polygon';      \r\nmeasureTools.continueLineMsg = 'Click to continue drawing the line';\r\nmeasureTools.draw; // global so we can remove it later\r\nmeasureTools.typeSelect = document.getElementById('type');\r\nmeasureTools.map = window.map;\r\n\r\n\r\nfunction pointerMoveHandler(evt) {\r\n  if (evt.dragging) {\r\n    return;\r\n  }\r\n  /** @type {string} */\r\n  var helpMsg = 'Click to start drawing';\r\n\r\n  if (measureTools.sketch) {\r\n    var geom = (measureTools.sketch.getGeometry());\r\n    if (geom instanceof ol.geom.Polygon) {\r\n      helpMsg = measureTools.continuePolygonMsg;\r\n    } else if (geom instanceof ol.geom.LineString) {\r\n      helpMsg = measureTools.continueLineMsg;\r\n    }\r\n  }\r\n\r\n  measureTools.helpTooltipElement.innerHTML = helpMsg;\r\n  measureTools.helpTooltip.setPosition(evt.coordinate);\r\n\r\n  measureTools.helpTooltipElement.classList.remove('hidden');\r\n}\r\nfunction formatLength(line) {\r\n  var length = ol.Sphere.getLength(line);\r\n  var output;\r\n  if (length > 100) {\r\n    output = (Math.round(length / 1000 * 100) / 100) +\r\n        ' ' + 'km';\r\n  } else {\r\n    output = (Math.round(length * 100) / 100) +\r\n        ' ' + 'm';\r\n  }\r\n  return output;\r\n}\r\nfunction formatArea(polygon) {\r\n  var area = ol.Sphere.getArea(polygon);\r\n  var output;\r\n  if (area > 10000) {\r\n    output = (Math.round(area / 1000000 * 100) / 100) +\r\n        ' ' + 'km<sup>2</sup>';\r\n  } else {\r\n    output = (Math.round(area * 100) / 100) +\r\n        ' ' + 'm<sup>2</sup>';\r\n  }\r\n  return output;\r\n}\r\nfunction createHelpTooltip() {\r\n  if (measureTools.helpTooltipElement) {\r\n    measureTools.helpTooltipElement.parentNode.removeChild(measureTools.helpTooltipElement);\r\n  }\r\n  measureTools.helpTooltipElement = document.createElement('div');\r\n  measureTools.helpTooltipElement.className = 'tooltip hidden';\r\n  measureTools.helpTooltip = new ol.Overlay({\r\n    element: measureTools.helpTooltipElement,\r\n    offset: [15, 0],\r\n    positioning: 'center-left'\r\n  });\r\n  map.addOverlay(measureTools.helpTooltip);\r\n}\r\nfunction createMeasureTooltip() {\r\n  if (measureTools.measureTooltipElement) {\r\n    measureTools.measureTooltipElement.parentNode.removeChild(measureTools.measureTooltipElement);\r\n  }\r\n  measureTools.measureTooltipElement = document.createElement('div');\r\n  measureTools.measureTooltipElement.className = 'tooltip tooltip-measure';\r\n  measureTools.measureTooltip = new ol.Overlay({\r\n    element: measureTools.measureTooltipElement,\r\n    offset: [0, -15],\r\n    positioning: 'bottom-center'\r\n  });\r\n  map.addOverlay(measureTools.measureTooltip);\r\n}\r\nfunction addInteraction() {\r\n  var type = (measureTools.typeSelect.value == 'area' ? 'Polygon' : 'LineString');\r\n  measureTools.draw = new ol.interaction.Draw({\r\n    source: Measuresource,\r\n    type: (type),\r\n    style: new ol.style.Style({\r\n      fill: new ol.style.Fill({\r\n        color: 'rgba(255, 255, 255, 0.2)'\r\n      }),\r\n      stroke: new ol.style.Stroke({\r\n        color: 'rgba(0, 0, 0, 0.5)',\r\n        lineDash: [10, 10],\r\n        width: 2\r\n      }),\r\n      image: new ol.style.Circle({\r\n        radius: 5,\r\n        stroke: new ol.style.Stroke({\r\n          color: 'rgba(0, 0, 0, 0.7)'\r\n        }),\r\n        fill: new ol.style.Fill({\r\n          color: 'rgba(255, 255, 255, 0.2)'\r\n        })\r\n      })\r\n    })\r\n  });  \r\n  map.addInteraction(measureTools.draw);\r\n\r\n  createMeasureTooltip();\r\n  createHelpTooltip();\r\n\r\n  var listener;\r\n  measureTools.draw.on('drawstart',\r\n      function(evt) {\r\n        // set sketch\r\n        measureTools.sketch = evt.feature;\r\n\r\n        var tooltipCoord = evt.coordinate;\r\n\r\n        listener = measureTools.sketch.getGeometry().on('change', function(evt) {\r\n          var geom = evt.target;\r\n          var output;\r\n          if (geom instanceof ol.geom.Polygon) {\r\n            output = formatArea(geom);\r\n            measureTools.tooltipCoord = geom.getInteriorPoint().getCoordinates();\r\n          } else if (geom instanceof ol.geom.LineString) {\r\n            output = formatLength(geom);\r\n            measureTools.tooltipCoord = geom.getLastCoordinate();\r\n          }\r\n          measureTools.measureTooltipElement.innerHTML = output;\r\n          measureTools.measureTooltip.setPosition(measureTools.tooltipCoord);\r\n        });\r\n      }, this);\r\n\r\n      measureTools.draw.on('drawend',\r\n      function() {\r\n        measureTools.measureTooltipElement.className = 'tooltip tooltip-static';\r\n        measureTools.measureTooltip.setOffset([0, -7]);\r\n        // unset sketch\r\n        measureTools.sketch = null;\r\n        // unset tooltip so that a new one can be created\r\n        measureTools.measureTooltipElement = null;\r\n        createMeasureTooltip();\r\n        ol.Observable.unByKey(listener);\r\n      }, this);\r\n}\r\nfunction initMeasure(){\r\n  map.on('pointermove', pointerMoveHandler);\r\n  map.getViewport().addEventListener('mouseout', function() {\r\n    measureTools.helpTooltipElement.classList.add('hidden');\r\n  });\r\n  measureTools.typeSelect.onchange = function() {\r\n    map.removeInteraction(measureTools.draw);\r\n    addInteraction();\r\n  };\r\n  addInteraction();\r\n}"]}